<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>


    <Version>1.1.0</Version>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    <Authors>Cyro</Authors>
    <Product>CherryPick Component Searcher</Product>
    <Description>Searchbar for component browsers in Resonite</Description>
    <Copyright>Copyright (c) 2024 Riley Fields</Copyright>

    <ReleaseBuild>./ReleaseBuild/</ReleaseBuild>
  </PropertyGroup>

  <!--This will test for the default Steam installation paths for Resonite on Windows and Linux.-->
  <PropertyGroup Condition="'$(ResonitePath)'==''">
    <ResonitePath Condition="'$(OS)' == 'Windows_NT' and Exists('C:\Program Files (x86)\Steam\steamapps\common\Resonite\')">C:\Program Files (x86)\Steam\steamapps\common\Resonite\</ResonitePath> 
    <ResonitePath Condition="'$(OS)' != 'Windows_NT' and Exists('$(HOME)/.local/share/Steam/steamapps/common/Resonite/')">$(HOME)/.local/share/Steam/steamapps/common/Resonite/</ResonitePath>
    <!--If neither path above exists, you can define your custom Resonite install directory here -->
    <ResonitePath Condition="'$(ResonitePath)'==''">/Custom/Resonite/Install/Path</ResonitePath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DestinationFolder)'==''">
    <DestinationFolder Condition="Exists($(ResonitePath))">$(ResonitePath)rml_mods</DestinationFolder>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="ResoniteModLoader">
      <HintPath>$(ResonitePath)Libraries\ResoniteModLoader.dll</HintPath>
    </Reference>
    <Reference Include="0Harmony">
      <HintPath>$(ResonitePath)0Harmony.dll</HintPath>
      <HintPath Condition="Exists('$(ResonitePath)rml_libs\0Harmony.dll')">$(ResonitePath)rml_libs\0Harmony.dll</HintPath>
      <HintPath Condition="Exists('$(ResonitePath)Libraries\0Harmony.dll')">$(ResonitePath)Libraries\0Harmony.dll</HintPath>
    </Reference>
    <Reference Include="FrooxEngine">
      <HintPath>$(ResonitePath)Resonite_Data\Managed\FrooxEngine.dll</HintPath>
    </Reference>
    <Reference Include="Elements.Core">
      <HintPath>$(ResonitePath)Resonite_Data\Managed\Elements.Core.dll</HintPath>
    </Reference>
    <Reference Include="Elements.Assets">
      <HintPath>$(ResonitePath)Resonite_Data\Managed\Elements.Assets.dll</HintPath>
    </Reference>
    <Reference Include="System.Memory">
      <HintPath>$(ResonitePath)Resonite_Data\Managed\System.Memory.dll</HintPath>
    </Reference>
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Copy SourceFiles="$(OutDir)$(TargetFileName)" DestinationFolder="$(ResonitePath)rml_mods" />
  </Target>


  <Target Name="MoveBinary" AfterTargets="Publish">
    <Copy SourceFiles="$(PublishDir)$(TargetFileName)" DestinationFolder="$(ReleaseBuild)" />
  </Target>


  <Target Name="DeepClean" AfterTargets="Clean">
    <RemoveDir Directories="./bin" />
    <RemoveDir Directories="./obj" />


    <ItemGroup>
      <FilesToDelete Include="$(ReleaseBuild)**/*" />
    </ItemGroup>


    <Delete Files="@(FilesToDelete)" />
    <Exec Command="dotnet restore" />
  </Target>
  
</Project>
